// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  MPESA
  BANK_TRANSFER
}

enum Type {
  hostel
  apartment
}

enum Property {
  apartment
  house
  condo
  land
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  username  String    @unique
  password  String
  avatar    String?
  createdAt DateTime  @default(now())
  posts     Post[]
  savedPosts SavedPost[]
  chats      Chat[]      @relation(fields: [chatIDs], references: [id])
  chatIDs    String[]    @db.ObjectId
  bookings  Booking[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  price     Int
  images    String[]
  address   String
  city      String
  bedroom   Int
  bathroom  Int
  latitude  String
  longitude String
  type      Type
  property  Property
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  savedPosts SavedPost[]
  bookings  Booking[]
  postDetail PostDetail?
}

model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @unique @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique @db.ObjectId

  @@unique([userId, postId])
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  users     User[]    @relation(fields: [userIDs], references: [id])
  userIDs   String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  seenBy    String[]
  messages  Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId 
  createdAt DateTime @default(now())
}

model Booking {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime      @default(now())
  startDate  DateTime
  endDate    DateTime
  status     BookingStatus @default(PENDING)
  post       Post          @relation(fields: [postId], references: [id])
  postId     String   @unique @db.ObjectId
  user       User          @relation(fields: [userId], references: [id])
  userId     String   @unique @db.ObjectId
  payments   Payment[]
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now())
  amount        Float
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String        @unique
  booking       Booking       @relation(fields: [bookingId], references: [id])
  bookingId     String  @unique @db.ObjectId
}